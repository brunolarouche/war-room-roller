{"version":3,"sources":["DiceRoller.js","serviceWorker.js","index.js"],"names":["Dice","props","className","quantity","color","DiceRoller","htmlToPushTo","dices","Array","groupedResults","this","getGroupedResults","push","renderDice","number","includes","numberOfDice","yellow","blue","green","red","black","white","index","numberToColor","Math","floor","random","fullTenRounds","dicesToAdd","renderAllDiceColors","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oOAEA,SAASA,EAAKC,GACZ,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,YACZD,EAAME,UAET,yBAAKD,UAAW,QAAUD,EAAMG,S,IAyFvBC,E,4LAlFOF,EAAUG,GAC5B,IAAIC,EAAQ,IAAIC,MACZC,EAAiBC,KAAKC,kBAAkBR,GAE5C,IAAK,IAAIC,KAASK,EAChBF,EAAMK,KACJF,KAAKG,WAAWT,EAAOK,EAAeL,KAI1C,OACE,yBAAKF,UAAU,UACZK,K,oCAKOO,GACZ,MAAI,CAAC,EAAG,EAAG,GAAGC,SAASD,GACd,OACE,CAAC,EAAG,GAAGC,SAASD,GAClB,QACa,IAAXA,EACF,MACa,KAAXA,EACF,QACa,KAAXA,EACF,QAEA,W,iCAIAV,EAAOD,GAChB,OAAO,kBAACH,EAAD,CAAMI,MAAOA,EAAOD,SAAUA,M,wCAGrBa,GAWhB,IAVA,IAAIZ,EACAK,EAAiB,CACnBQ,OAAQ,EACRC,KAAM,EACNC,MAAO,EACPC,IAAK,EACLC,MAAO,EACPC,MAAO,GAGAC,EAAQ,EAAGA,EAAQP,EAAcO,IAAS,CAG7Cd,EADJL,GADa,IAAIC,GACFmB,cAAcC,KAAKC,MAAsB,GAAhBD,KAAKE,YAE3ClB,EAAeL,GAASK,EAAeL,GAAS,EAEhDK,EAAeL,GAAS,EAI5B,OAAOK,I,+BAQP,IAJA,IAAIF,EAAQ,GACRqB,EAAgBlB,KAAKT,MAAME,SAAW,GACtC0B,EAAanB,KAAKT,MAAME,SAAW,GAE9BoB,EAAQ,EAAGA,EAAQK,EAAeL,IACzChB,EAAMK,KAAKF,KAAKoB,oBAAoB,KAOtC,OAJID,EAAa,GACftB,EAAMK,KAAKF,KAAKoB,oBAAoBD,IAIpC,yBAAK3B,UAAU,kBACZK,O,GA7EgBwB,IAAMC,WCFXC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,CAAYpC,SAAU,KAAQqC,SAASC,eAAe,SD6HhE,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.ca7c14b4.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Dice(props) {\n  return (\n    <div className=\"row\">\n      <div className=\"quantity\">\n        {props.quantity}\n      </div>\n      <div className={'dice ' + props.color}>\n      </div>\n    </div>\n  );\n}\n\nclass DiceRoller extends React.Component {\n  renderAllDiceColors(quantity, htmlToPushTo) {\n    var dices = new Array();\n    var groupedResults = this.getGroupedResults(quantity)\n\n    for (var color in groupedResults) {\n      dices.push(\n        this.renderDice(color, groupedResults[color])\n      )\n    }\n\n    return (\n      <div className=\"roller\">\n        {dices}\n      </div>\n    )\n  }\n\n  numberToColor(number) {\n    if ([4, 5, 6].includes(number)) {\n      return 'blue';\n    } else if ([7, 8].includes(number)) {\n      return 'green';\n    } else if (number === 9) {\n      return 'red';\n    } else if (number === 10) {\n      return 'black';\n    } else if (number === 11) {\n      return 'white';\n    } else {\n      return 'yellow';\n    }\n  }\n\n  renderDice(color, quantity) {\n    return <Dice color={color} quantity={quantity} />;\n  }\n\n  getGroupedResults(numberOfDice) {\n    var color;\n    var groupedResults = { \n      yellow: 0,\n      blue: 0,\n      green: 0,\n      red: 0,\n      black: 0,\n      white: 0\n    };\n\n    for (let index = 0; index < numberOfDice; index++) {\n      var roller = new DiceRoller();\n      color = roller.numberToColor(Math.floor(Math.random() * 12));\n      if (groupedResults[color]) {\n        groupedResults[color] = groupedResults[color] + 1;\n      } else {\n        groupedResults[color] = 1;\n      }\n    }\n\n    return groupedResults;\n  }\n\n  render() {\n    var dices = [];\n    var fullTenRounds = this.props.quantity / 10;\n    var dicesToAdd = this.props.quantity % 10;\n\n    for (let index = 0; index < fullTenRounds; index++) {\n      dices.push(this.renderAllDiceColors(10));\n    }\n\n    if (dicesToAdd > 0) {\n      dices.push(this.renderAllDiceColors(dicesToAdd));\n    }\n\n    return (\n      <div className=\"onePlayerDices\">\n        {dices}\n      </div>\n    )\n  }\n}\n\nexport default DiceRoller;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport DiceRoller from './DiceRoller';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<DiceRoller quantity={10} />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}